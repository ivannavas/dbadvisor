name: Release on tag

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up JDK 21 + GPG
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Generate Maven settings.xml (Central token)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${HOME}/.m2"
          cat > "${HOME}/.m2/settings.xml" <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>central</id>
                <username>${{ secrets.CENTRAL_USERNAME }}</username>
                <password>${{ secrets.CENTRAL_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Prepare GPG for CI
        run: |
          set -euo pipefail
          mkdir -p ~/.gnupg
          echo 'allow-loopback-pinentry' >> ~/.gnupg/gpg-agent.conf
          echo 'pinentry-mode loopback' >> ~/.gnupg/gpg.conf
          gpgconf --kill gpg-agent || true

      - name: Install XML tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      - name: Determine tag version and revision from maven.config
        id: versions
        shell: bash
        run: |
          set -euo pipefail
          TAG_NAME="${GITHUB_REF_NAME}"
          TAG_VER="${TAG_NAME#v}"
          echo "tag_version=$TAG_VER" >> "$GITHUB_OUTPUT"

          CONFIG_FILE=".mvn/maven.config"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "$CONFIG_FILE not found" >&2
            exit 1
          fi

          if grep -R --line-number -E 'gpg\.passphrase|MAVEN_GPG_PASSPHRASE\s*=' .mvn || true; then
            echo "No metas gpg.passphrase en .mvn/maven.config ni en settings. Usa variable de entorno." >&2
          fi

          REV_LINE=$(tr -d '\r' < "$CONFIG_FILE" | tr ' ' '\n' | grep -E '^-Drevision=' | head -n1 || true)
          if [ -z "$REV_LINE" ]; then
            echo "Could not find -Drevision in $CONFIG_FILE" >&2
            exit 1
          fi

          REV="${REV_LINE#-Drevision=}"
          REV="${REV%\"}"; REV="${REV#\"}"; REV="${REV%-SNAPSHOT}"
          echo "maven_revision=$REV" >> "$GITHUB_OUTPUT"
          if [ "$REV" != "$TAG_VER" ]; then
            echo "Tag ($TAG_VER) does not match maven revision ($REV)." >&2
            exit 1
          fi

      - name: Read module order from parent POM
        id: order
        shell: bash
        run: |
          set -euo pipefail
          ORDER_RAW=$(xmllint --xpath 'string-join(/project/modules/module/text(), " ")' pom.xml)
          ORDER=""
          for m in $ORDER_RAW; do
            if [ "$m" != "dbadvisor-bom" ]; then
              ORDER="$ORDER $m"
            fi
          done
          ORDER=$(echo "$ORDER" | xargs || true)
          echo "order=$ORDER" >> "$GITHUB_OUTPUT"

      - name: Detect changed module versions and preserve POM order
        id: changed
        shell: bash
        run: |
          set -euo pipefail
          CUR="${GITHUB_REF_NAME}"
          PREV=$(git tag --sort=-creatordate | grep '^v' | grep -v "^${CUR}$" | head -n1 || true)

          if [ -z "${PREV}" ]; then
            MODULES="${{ steps.order.outputs.order }}"
          else
            DIFF=$(git diff -U0 "${PREV}"..."${CUR}" -- pom.xml | grep -E '^[+-]\s*<dbadvisor\..*\.version>' || true)

            CHANGED=""
            if [ -n "$DIFF" ]; then
              while IFS= read -r line; do
                n=$(printf "%s\n" "$line" | sed -E 's/.*<dbadvisor\.([a-z0-9-]+)\.version>.*/dbadvisor-\1/')
                [ -n "$n" ] && CHANGED="$CHANGED $n"
              done <<< "$DIFF"
            fi
            CHANGED=$(echo "$CHANGED" | xargs -n1 2>/dev/null | sort -u | xargs 2>/dev/null || true)
          
            MODULES=""
            for m in ${{ steps.order.outputs.order }}; do
              if echo " $CHANGED " | grep -q " $m "; then
                MODULES="$MODULES $m"
              fi
            done
            MODULES=$(echo "$MODULES" | xargs || true)
          fi

          echo "modules=$MODULES" >> "$GITHUB_OUTPUT"

      - name: Deploy BOM
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -euo pipefail
          mvn -B -U -DskipTests \
            -Dgpg.executable=gpg \
            -Dgpg.args="--batch --yes --pinentry-mode loopback" \
            deploy -f dbadvisor-bom/pom.xml

      - name: Deploy changed modules in POM order
        if: ${{ steps.changed.outputs.modules != '' }}
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -euo pipefail
          for m in ${{ steps.changed.outputs.modules }}; do
            echo "Deploying $m"
            mvn -B -U -DskipTests \
              -Dgpg.executable=gpg \
              -Dgpg.args="--batch --yes --pinentry-mode loopback" \
              deploy -f "$m/pom.xml"
          done

      - name: Collect module versions and prepare release notes
        id: notes
        shell: bash
        run: |
          set -euo pipefail
          BODY_FILE="RELEASE_BODY.md"
          {
            echo "# dbadvisor ${{ steps.versions.outputs.tag_version }}"
            echo
            echo "## Info"
            echo "- Tag: \`${{ github.ref_name }}\`"
            echo "- Commit: \`${{ github.sha }}\`"
            echo
            echo "## Deployed Modules"
            echo "${{ steps.changed.outputs.modules || steps.order.outputs.order }}" | tr ' ' '\n' | sed '/^$/d' | sed 's/^/- /'
          } > "$BODY_FILE"
          echo "body_path=$BODY_FILE" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: dbadvisor ${{ steps.versions.outputs.tag_version }}
          body_path: ${{ steps.notes.outputs.body_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
