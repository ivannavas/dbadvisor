name: Release module on tag

on:
  push:
    tags:
      - 'dbadvisor-bom-v*'
      - 'dbadvisor-core-v*'
      - 'dbadvisor-hibernate-v*'
      - 'dbadvisor-h2-v*'
      - 'dbadvisor-postgresql-v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up JDK 21 + GPG
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Generate Maven settings.xml (Central token)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${HOME}/.m2"
          cat > "${HOME}/.m2/settings.xml" <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>central</id>
                <username>${{ secrets.CENTRAL_USERNAME }}</username>
                <password>${{ secrets.CENTRAL_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Prepare GPG for CI
        run: |
          set -euo pipefail
          mkdir -p ~/.gnupg
          echo 'allow-loopback-pinentry' >> ~/.gnupg/gpg-agent.conf
          echo 'pinentry-mode loopback' >> ~/.gnupg/gpg.conf
          gpgconf --kill gpg-agent || true

      - name: Install XML tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      - name: Parse tag -> module + version
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

          case "$TAG" in
            dbadvisor-bom-v*)         MOD="bom"         ;;
            dbadvisor-core-v*)        MOD="core"        ;;
            dbadvisor-hibernate-v*)   MOD="hibernate"   ;;
            dbadvisor-h2-v*)          MOD="h2"          ;;
            dbadvisor-postgresql-v*)  MOD="postgresql"  ;;
            *) echo "Tag no reconocido: $TAG" >&2; exit 1 ;;
          esac
          VER="${TAG##*-v}"
          echo "module=$MOD" >> "$GITHUB_OUTPUT"
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      - name: Map module -> path/artifactId
        id: map
        shell: bash
        run: |
          set -euo pipefail
          MOD="${{ steps.tag.outputs.module }}"
          case "$MOD" in
            bom)         PATH="dbadvisor-bom";         AID="dbadvisor-bom"         ;;
            core)        PATH="dbadvisor-core";        AID="dbadvisor-core"        ;;
            hibernate)   PATH="dbadvisor-hibernate";   AID="dbadvisor-hibernate"   ;;
            h2)          PATH="dbadvisor-h2";          AID="dbadvisor-h2"          ;;
            postgresql)  PATH="dbadvisor-postgresql";  AID="dbadvisor-postgresql"  ;;
            *) echo "Módulo no mapeado: $MOD" >&2; exit 1 ;;
          esac
          echo "path=$PATH" >> "$GITHUB_OUTPUT"
          echo "artifactId=$AID" >> "$GITHUB_OUTPUT"

      - name: Validate module version in POMs
        shell: bash
        run: |
          set -euo pipefail
          MOD="${{ steps.tag.outputs.module }}"
          VER="${{ steps.tag.outputs.version }}"

          if [ "$MOD" = "bom" ]; then
            xmllint --xpath "string(/project/version)" dbadvisor-bom/pom.xml >/dev/null 2>&1 || true
          else
            PROP="dbadvisor.${MOD}.version"
            DECL=$(xmllint --xpath "string(/project/properties/${PROP})" pom.xml 2>/dev/null || true)
            if [ -n "$DECL" ] && [ "$DECL" != "$VER" ]; then
              echo "Aviso: ${PROP} en parent POM es '$DECL' y el tag es '$VER'." >&2
              echo "Seguimos igualmente; confío en que sabes lo que haces." >&2
            fi
          fi

      - name: Deploy selected module (independiente)
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -euo pipefail
          MOD="${{ steps.tag.outputs.module }}"
          PATH_MOD="${{ steps.map.outputs.path }}"
          AID="${{ steps.map.outputs.artifactId }}"

          if [ "$MOD" = "bom" ]; then
            echo "Deploying BOM: $PATH_MOD"
            mvn -B -U -DskipTests \
              -Dgpg.executable=gpg \
              -Dgpg.args="--batch --yes --pinentry-mode loopback" \
              deploy -f "$PATH_MOD/pom.xml"
          else
            echo "Deploying module: $AID ($PATH_MOD)"
            mvn -B -U -DskipTests \
              -Dgpg.executable=gpg \
              -Dgpg.args="--batch --yes --pinentry-mode loopback" \
              -pl ":$AID" -am \
              deploy
          fi

      - name: Prepare release notes
        id: notes
        shell: bash
        run: |
          set -euo pipefail
          BODY_FILE="RELEASE_BODY.md"
          {
            echo "# ${{
              steps.map.outputs.artifactId
            }} ${{ steps.tag.outputs.version }}"
            echo
            echo "## Info"
            echo "- Tag: \`${{ github.ref_name }}\`"
            echo "- Commit: \`${{ github.sha }}\`"
            echo "- Módulo: \`${{ steps.tag.outputs.module }}\`"
          } > "$BODY_FILE"
          echo "body_path=$BODY_FILE" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ steps.map.outputs.artifactId }} ${{ steps.tag.outputs.version }}
          body_path: ${{ steps.notes.outputs.body_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
